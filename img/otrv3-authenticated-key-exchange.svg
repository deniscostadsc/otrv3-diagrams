<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"><svg xmlns="http://www.w3.org/2000/svg" width="1520" height="1712" xmlns:xlink="http://www.w3.org/1999/xlink"><source><![CDATA[title: OTRv3 - Authenticated Key Exchange (AKE)

Note right of Bob: Picks a random value r (128 bits)
Note right of Bob: Picks a random value x (at least 320 bits)
Bob->Alice: Sends AESr(g^x), HASH(g^x) to Alice

Note right of Alice: Picks a random value y (at least 320 bits)
Alice->Bob: Sends Bob g^y

Note right of Bob: Verifies that Alice's g^y is a legal value (2 <= g^y <= modulus-2)
Note right of Bob: Computes s = (g^y)^x
Note right of Bob: Computes two AES keys c, c' and four MAC keys m1, m1', m2, m2' by \n hashing s in various ways
Note right of Bob: Picks keyid B, a serial number for his D-H key g^x
Note right of Bob: Computes M B = MACm1(g^x, g^y, pubB, keyidB)
Note right of Bob: Computes XB = pubB, keyidB, sigB(MB)
Bob->Alice: Sends Alice r, AESc(XB), MACm2(AESc(XB))

Note right of Alice: Uses r to decrypt the value of g^x sent earlier
Note right of Alice: Verifies that HASH(g^x) matches the value sent earlier
Note right of Alice: Verifies that Bob's g^x is a legal value (2 <= g^x <= modulus-2)
Note right of Alice: Computes s = (g^x)^y (note that this will be the same as the value \n of s Bob calculated)
Note right of Alice: Computes two AES keys c, c' and four MAC keys m1, m1', m2, m2' by \n hashing s in various ways (the same as Bob)
Note right of Alice: Uses m2 to verify MACm2(AESc(XB))
Note right of Alice: Uses c to decrypt AESc(XB) to obtain XB = pubB, keyidB, sigB(MB)
Note right of Alice: Computes MB = MACm1(g^x, g^y, pubB, keyidB)
Note right of Alice: Uses pubB to verify sigB(MB)
Note right of Alice: Picks keyidA, a serial number for her D-H key g^y
Note right of Alice: Computes MA = MACm1'(g^y, g^x, pubA, keyidA)
Note right of Alice: Computes XA = pubA, keyidA, sigA(MA)
Alice->Bob: Sends Bob AESc'(XA), MACm2'(AESc'(XA))

Note right of Bob: Uses m2' to verify MACm2'(AESc'(XA))
Note right of Bob: Uses c' to decrypt AESc'(XA) to obtain XA = pubA, keyidA, sigA(MA)
Note right of Bob: Computes MA = MACm1'(g^y, g^x, pubA, keyidA)
Note right of Bob: Uses pubA to verify sigA(MA)

Note over Alice, Bob: If all of the verifications succeeded, Alice and Bob now know \n each other's Diffie-Hellman public keys, and share the value s. \n Alice is assured that s is known by someone with access to the \n private key corresponding to pubB, and similarly for Bob.]]></source><desc>OTRv3 - Authenticated Key Exchange (AKE)</desc><defs><marker viewBox="0 0 5 5" markerWidth="5" markerHeight="5" orient="auto" refX="5" refY="2.5" id="markerArrowBlock"><path d="M 0 0 L 5 2.5 L 0 5 z"></path></marker><marker viewBox="0 0 9.6 16" markerWidth="4" markerHeight="16" orient="auto" refX="9.6" refY="8" id="markerArrowOpen"><path d="M 9.6,8 1.92,16 0,13.7 5.76,8 0,2.286 1.92,0 9.6,8 z"></path></marker></defs><g class="title"><rect x="10" y="10" width="410" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="15" y="30" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="15">OTRv3 - Authenticated Key Exchange (AKE)</tspan></text></g><g class="actor"><rect x="10" y="49" width="50" height="39" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="20" y="74" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="20">Bob</tspan></text></g><g class="actor"><rect x="10" y="1653.200008392334" width="50" height="39" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="20" y="1678.200008392334" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="20">Bob</tspan></text></g><line x1="35" x2="35" y1="88" y2="1653.200008392334" style="stroke-width: 2;" stroke="#000000" fill="none"></line><g class="actor"><rect x="710" y="49" width="70" height="39" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="720" y="74" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="720">Alice</tspan></text></g><g class="actor"><rect x="710" y="1653.200008392334" width="70" height="39" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="720" y="1678.200008392334" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="720">Alice</tspan></text></g><line x1="745" x2="745" y1="88" y2="1653.200008392334" style="stroke-width: 2;" stroke="#000000" fill="none"></line><g class="note"><rect x="55" y="108" width="340" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="128" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Picks a random value r (128 bits)</tspan></text></g><g class="note"><rect x="55" y="157" width="430" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="177" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Picks a random value x (at least 320 bits)</tspan></text></g><g class="signal"><text x="215" y="216.5" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="215">Sends AESr(g^x), HASH(g^x) to Alice</tspan></text><line x1="35" x2="745" y1="225" y2="225" style="stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);" stroke="#000000" fill="none"></line></g><g class="note"><rect x="765" y="245" width="430" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="265" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Picks a random value y (at least 320 bits)</tspan></text></g><g class="signal"><text x="325" y="304.5" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="325">Sends Bob g^y</tspan></text><line x1="745" x2="35" y1="313" y2="313" style="stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);" stroke="#000000" fill="none"></line></g><g class="note"><rect x="55" y="333" width="670" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="353" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Verifies that Alice's g^y is a legal value (2 &lt;= g^y &lt;= modulus-2)</tspan></text></g><g class="note"><rect x="55" y="382" width="210" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="402" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Computes s = (g^y)^x</tspan></text></g><g class="note"><rect x="55" y="431" width="660" height="48.20000076293945" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="451" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Computes two AES keys c, c' and four MAC keys m1, m1', m2, m2' by</tspan><tspan dy="1.2em" x="60">hashing s in various ways</tspan></text></g><g class="note"><rect x="55" y="499.20000076293945" width="510" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="519.2000007629395" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Picks keyid B, a serial number for his D-H key g^x</tspan></text></g><g class="note"><rect x="55" y="548.2000007629395" width="450" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="568.2000007629395" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Computes M B = MACm1(g^x, g^y, pubB, keyidB)</tspan></text></g><g class="note"><rect x="55" y="597.2000007629395" width="370" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="617.2000007629395" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Computes XB = pubB, keyidB, sigB(MB)</tspan></text></g><g class="signal"><text x="190" y="656.7000007629395" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="190">Sends Alice r, AESc(XB), MACm2(AESc(XB))</tspan></text><line x1="35" x2="745" y1="665.2000007629395" y2="665.2000007629395" style="stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);" stroke="#000000" fill="none"></line></g><g class="note"><rect x="765" y="685.2000007629395" width="480" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="705.2000007629395" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Uses r to decrypt the value of g^x sent earlier</tspan></text></g><g class="note"><rect x="765" y="734.2000007629395" width="550" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="754.2000007629395" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Verifies that HASH(g^x) matches the value sent earlier</tspan></text></g><g class="note"><rect x="765" y="783.2000007629395" width="650" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="803.2000007629395" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Verifies that Bob's g^x is a legal value (2 &lt;= g^x &lt;= modulus-2)</tspan></text></g><g class="note"><rect x="765" y="832.2000007629395" width="670" height="48.20000076293945" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="852.2000007629395" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Computes s = (g^x)^y (note that this will be the same as the value</tspan><tspan dy="1.2em" x="770">of s Bob calculated)</tspan></text></g><g class="note"><rect x="765" y="900.4000015258789" width="660" height="48.20000076293945" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="920.4000015258789" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Computes two AES keys c, c' and four MAC keys m1, m1', m2, m2' by</tspan><tspan dy="1.2em" x="770">hashing s in various ways (the same as Bob)</tspan></text></g><g class="note"><rect x="765" y="968.6000022888184" width="340" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="988.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Uses m2 to verify MACm2(AESc(XB))</tspan></text></g><g class="note"><rect x="765" y="1017.6000022888184" width="650" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="1037.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Uses c to decrypt AESc(XB) to obtain XB = pubB, keyidB, sigB(MB)</tspan></text></g><g class="note"><rect x="765" y="1066.6000022888184" width="440" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="1086.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Computes MB = MACm1(g^x, g^y, pubB, keyidB)</tspan></text></g><g class="note"><rect x="765" y="1115.6000022888184" width="290" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="1135.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Uses pubB to verify sigB(MB)</tspan></text></g><g class="note"><rect x="765" y="1164.6000022888184" width="500" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="1184.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Picks keyidA, a serial number for her D-H key g^y</tspan></text></g><g class="note"><rect x="765" y="1213.6000022888184" width="450" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="1233.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Computes MA = MACm1'(g^y, g^x, pubA, keyidA)</tspan></text></g><g class="note"><rect x="765" y="1262.6000022888184" width="370" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="770" y="1282.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="770">Computes XA = pubA, keyidA, sigA(MA)</tspan></text></g><g class="signal"><text x="200" y="1322.1000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="200">Sends Bob AESc'(XA), MACm2'(AESc'(XA))</tspan></text><line x1="745" x2="35" y1="1330.6000022888184" y2="1330.6000022888184" style="stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);" stroke="#000000" fill="none"></line></g><g class="note"><rect x="55" y="1350.6000022888184" width="370" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="1370.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Uses m2' to verify MACm2'(AESc'(XA))</tspan></text></g><g class="note"><rect x="55" y="1399.6000022888184" width="670" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="1419.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Uses c' to decrypt AESc'(XA) to obtain XA = pubA, keyidA, sigA(MA)</tspan></text></g><g class="note"><rect x="55" y="1448.6000022888184" width="450" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="1468.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Computes MA = MACm1'(g^y, g^x, pubA, keyidA)</tspan></text></g><g class="note"><rect x="55" y="1497.6000022888184" width="290" height="29" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="60" y="1517.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="60">Uses pubA to verify sigA(MA)</tspan></text></g><g class="note"><rect x="25" y="1546.6000022888184" width="730" height="86.60000610351562" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="30" y="1566.6000022888184" style="font-size: 16px; font-family: Andale Mono, monospace;"><tspan x="30">If all of the verifications succeeded, Alice and Bob now know</tspan><tspan dy="1.2em" x="30">each other's Diffie-Hellman public keys, and share the value s.</tspan><tspan dy="1.2em" x="30">Alice is assured that s is known by someone with access to the</tspan><tspan dy="1.2em" x="30">private key corresponding to pubB, and similarly for Bob.</tspan></text></g></svg>